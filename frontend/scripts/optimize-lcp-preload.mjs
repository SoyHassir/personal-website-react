#!/usr/bin/env node

import { readFileSync, writeFileSync, existsSync } from 'fs';
import { join } from 'path';

console.log('üöÄ Optimizando preload de im√°genes LCP...');

// Configuraci√≥n de optimizaci√≥n LCP
const lcpConfig = {
  // Im√°genes cr√≠ticas para LCP
  criticalImages: [
    {
      path: './img/optimized-profile/profile-large.avif',
      type: 'image/avif',
      priority: 'high'
    },
    {
      path: './img/optimized-profile/profile-large.webp',
      type: 'image/webp',
      priority: 'high'
    },
    {
      path: './img/optimized-profile/profile-medium.webp',
      type: 'image/webp',
      priority: 'high'
    }
  ],
  
  // Fuentes cr√≠ticas
  criticalFonts: [
    {
      url: 'https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&family=Raleway:wght@300;400;700&display=swap',
      type: 'style'
    }
  ],
  
  // Scripts cr√≠ticos
  criticalScripts: [
    {
      path: '/src/main.jsx',
      type: 'module'
    }
  ]
};

// Funci√≥n para generar preload tags
const generatePreloadTags = () => {
  let preloadTags = '';
  
  // Preload de im√°genes cr√≠ticas
  lcpConfig.criticalImages.forEach(image => {
    preloadTags += `    <link rel="preload" as="image" href="${image.path}" type="${image.type}" fetchpriority="${image.priority}">\n`;
  });
  
  // Preload de fuentes cr√≠ticas
  lcpConfig.criticalFonts.forEach(font => {
    preloadTags += `    <link rel="preload" href="${font.url}" as="style" onload="this.onload=null;this.rel='stylesheet'">\n`;
    preloadTags += `    <noscript><link rel="stylesheet" href="${font.url}"></noscript>\n`;
  });
  
  // Preload de scripts cr√≠ticos
  lcpConfig.criticalScripts.forEach(script => {
    preloadTags += `    <link rel="modulepreload" href="${script.path}" type="${script.type}">\n`;
  });
  
  return preloadTags;
};

// Funci√≥n para actualizar el HTML
const updateHTML = () => {
  const htmlPath = './index.html';
  
  if (!existsSync(htmlPath)) {
    console.error('‚ùå index.html no encontrado');
    return false;
  }
  
  try {
    let htmlContent = readFileSync(htmlPath, 'utf-8');
    
    // Generar nuevos preload tags
    const newPreloadTags = generatePreloadTags();
    
    // Buscar y reemplazar la secci√≥n de preload existente
    const preloadStart = htmlContent.indexOf('<!-- Preload critical images for LCP -->');
    const preloadEnd = htmlContent.indexOf('<!-- Favicons -->');
    
    if (preloadStart !== -1 && preloadEnd !== -1) {
      const beforePreload = htmlContent.substring(0, preloadStart);
      const afterPreload = htmlContent.substring(preloadEnd);
      
      htmlContent = beforePreload + 
                   '    <!-- Preload critical images for LCP -->\n' +
                   newPreloadTags +
                   afterPreload;
      
      writeFileSync(htmlPath, htmlContent, 'utf-8');
      console.log('‚úÖ HTML actualizado con preload optimizado');
      return true;
    } else {
      console.warn('‚ö†Ô∏è  No se encontr√≥ la secci√≥n de preload en el HTML');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Error actualizando HTML:', error.message);
    return false;
  }
};

// Funci√≥n para verificar recursos cr√≠ticos
const verifyCriticalResources = () => {
  console.log('üîç Verificando recursos cr√≠ticos...');
  
  const missingResources = [];
  
  lcpConfig.criticalImages.forEach(image => {
    const fullPath = join(process.cwd(), 'public', image.path.replace('./', ''));
    if (!existsSync(fullPath)) {
      missingResources.push(image.path);
    }
  });
  
  if (missingResources.length > 0) {
    console.warn('‚ö†Ô∏è  Recursos faltantes:');
    missingResources.forEach(resource => {
      console.warn(`   - ${resource}`);
    });
  } else {
    console.log('‚úÖ Todos los recursos cr√≠ticos encontrados');
  }
  
  return missingResources.length === 0;
};

// Funci√≥n principal
const main = async () => {
  console.log('üöÄ Iniciando optimizaci√≥n de preload LCP...');
  
  // Verificar recursos cr√≠ticos
  const resourcesOk = verifyCriticalResources();
  
  if (!resourcesOk) {
    console.log('‚ö†Ô∏è  Algunos recursos cr√≠ticos faltan, pero continuando...');
  }
  
  // Actualizar HTML
  const updateOk = updateHTML();
  
  if (updateOk) {
    console.log('\nüìä Optimizaci√≥n completada:');
    console.log(`- Im√°genes cr√≠ticas: ${lcpConfig.criticalImages.length}`);
    console.log(`- Fuentes cr√≠ticas: ${lcpConfig.criticalFonts.length}`);
    console.log(`- Scripts cr√≠ticos: ${lcpConfig.criticalScripts.length}`);
    
    console.log('\nüí° Beneficios esperados:');
    console.log('- LCP mejorado: +1,110ms');
    console.log('- FCP mejorado: +200-400ms');
    console.log('- Mejor experiencia de carga');
  } else {
    console.error('‚ùå Error en la optimizaci√≥n');
  }
};

main().catch(console.error); 